Task 13. Parallel matrix multiplication

We will now parallelize the matrix multiplication program using threads. Parallelize the program according to the following
assumptions:

    • Parallelize only the matrix multiplication, but not the initialization.
    • A new thread shall be created for each row to be calculated in the matrix.
    • The row number of the row that a thread shall calculate, shall be passed to the new thread as a parameter to the new
    thread.
    • The main function shall wait until all threads have terminated before the program terminates.

Compile and link your parallel version of the matrix multiplication program. Don’t forget to add -lpthread when you
link your program. We will now measure how much faster the parallel program is as compared to the sequential one.

Execute the program and measure the execution time.

How long was the execution time of your parallel program?

Time taken: 7.026955 seconds

Which speedup did you get (as compared to the execution time of the sequential version,
where Speedup = Tsequential/Tparallel)?

3.709386 seconds/7.026955 seconds = 0.5278795723040777

this means that the parallel version is slower. Could have with overhead of thread creation and synchronization issues.